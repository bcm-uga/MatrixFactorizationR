// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_P
Rcpp::List compute_P(const Eigen::Map<Eigen::MatrixXd>& X, const double lambda);
RcppExport SEXP MatrixFactorizationR_compute_P(SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_P(X, lambda));
    return rcpp_result_gen;
END_RCPP
}
// compute_soft_SVD
void compute_soft_SVD(const Eigen::MatrixXd& Y, const double gamma, Eigen::MatrixXd& U, Eigen::MatrixXd& V);
RcppExport SEXP MatrixFactorizationR_compute_soft_SVD(SEXP YSEXP, SEXP gammaSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type V(VSEXP);
    compute_soft_SVD(Y, gamma, U, V);
    return R_NilValue;
END_RCPP
}
// lassoLFMM_main
Rcpp::List lassoLFMM_main(const Eigen::Map<Eigen::MatrixXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const double gamma, const double lambda, const double relative_err_epsilon, const int it_max, const Eigen::Map<Eigen::MatrixXd> U0, const Eigen::Map<Eigen::MatrixXd> V0, const Eigen::Map<Eigen::MatrixXd> B0);
RcppExport SEXP MatrixFactorizationR_lassoLFMM_main(SEXP YSEXP, SEXP XSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP relative_err_epsilonSEXP, SEXP it_maxSEXP, SEXP U0SEXP, SEXP V0SEXP, SEXP B0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_err_epsilon(relative_err_epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type it_max(it_maxSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type U0(U0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B0(B0SEXP);
    rcpp_result_gen = Rcpp::wrap(lassoLFMM_main(Y, X, gamma, lambda, relative_err_epsilon, it_max, U0, V0, B0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"MatrixFactorizationR_compute_P", (DL_FUNC) &MatrixFactorizationR_compute_P, 2},
    {"MatrixFactorizationR_compute_soft_SVD", (DL_FUNC) &MatrixFactorizationR_compute_soft_SVD, 4},
    {"MatrixFactorizationR_lassoLFMM_main", (DL_FUNC) &MatrixFactorizationR_lassoLFMM_main, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixFactorizationR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
